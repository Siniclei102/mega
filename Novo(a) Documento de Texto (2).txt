    <section class="controls">
        <button
          id="refresh-button"
          type="button"
          title="Atualizar as configurações do app"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cloud-arrow-down" viewBox="0 0 16 16">
  <path fill-rule="evenodd" d="M7.646 10.854a.5.5 0 0 0 .708 0l2-2a.5.5 0 0 0-.708-.708L8.5 9.293V5.5a.5.5 0 0 0-1 0v3.793L6.354 8.146a.5.5 0 1 0-.708.708l2 2z"/>
  <path d="M4.406 3.342A5.53 5.53 0 0 1 8 2c2.69 0 4.923 2 5.166 4.579C14.758 6.804 16 8.137 16 9.773 16 11.569 14.502 13 12.687 13H3.781C1.708 13 0 11.366 0 9.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383zm.653.757c-.757.653-1.153 1.44-1.153 2.056v.448l-.445.049C2.064 6.805 1 7.952 1 9.318 1 10.785 2.23 12 3.781 12h8.906C13.98 12 15 10.988 15 9.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 4.825 10.328 3 8 3a4.53 4.53 0 0 0-2.941 1.1z"/>
</svg>
        </button>

        <button id="renew" type="button" title="Renovar pagamento">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-envelope" viewBox="0 0 16 16">
  <path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4Zm2-1a1 1 0 0 0-1 1v.217l7 4.2 7-4.2V4a1 1 0 0 0-1-1H2Zm13 2.383-4.708 2.825L15 11.105V5.383Zm-.034 6.876-5.64-3.471L8 9.583l-1.326-.795-5.64 3.47A1 1 0 0 0 2 13h12a1 1 0 0 0 .966-.741ZM1 11.105l4.708-2.897L1 5.383v5.722Z"/>
</svg>
        </button>

        <button
          id="backToHome"
          type="button"
          title="Voltar para a página inicial"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            fill="currentColor"
            class="bi bi-house"
            viewBox="0 0 16 16"
          >
            <path
              d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5ZM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5 5 5Z"
            />
          </svg>
        </button>

        <button id="utilitys" type="button" title="utilidades">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            fill="currentColor"
            class="bi bi-gear"
            viewBox="0 0 16 16"
          >
            <path
              d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z"
            />
            <path
              d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z"
            />
          </svg>
        </button>

        <button id="profile-button" type="button" title="Detalhes do usuário">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            fill="currentColor"
            class="bi bi-person"
            viewBox="0 0 16 16"
          >
            <path
              d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4Zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10Z"
            />
          </svg>
        </button>
      </section>
    </main>

    <!-- VARIAVEIS DE CONSULTA -->
    <script>
      let dataCheckuser
      let zIndexContainers
    </script>

    <!-- FUNÇÕES DO APP -->
    <script>
      const dtStatusBarHeight = () => DtGetStatusBarHeight.execute()
      const dtNavHeight = () => DtGetNavigationBarHeight.execute()

      const dtGetLogs = () => DtGetLogs.execute()
      const dtClearLogs = () => DtClearLogs.execute()

      const dtVpnState = () => DtGetVpnState.execute()

      const dtTranslateText = (label) => DtTranslateText.execute(label)

      const dtStartVpn = () => DtExecuteVpnStart.execute()
      const dtStopVpn = () => DtExecuteVpnStop.execute()

      const dtUpdate = () => DtStartAppUpdate.execute()

      const dtAllConfigs = () => DtGetConfigs.execute()
      const dtSetConfig = (id) => DtSetConfig.execute(id)
      const dtGetDefaultConfig = () => DtGetDefaultConfig.execute()

      const dtGetUsername = () => DtUsername.get()
      const dtSetUsername = (username) => DtUsername.set(username)
      const dtGetPassword = () => DtPassword.get()
      const dtSetPassword = (password) => DtPassword.set(password)
      const dtGetUUID = () => DtUuid.get()
      const dtSetUUID = (uuid) => DtUuid.set(uuid)

      const dtApnConfig = () => DtStartApnActivity.execute()
      const dtBatteryOptimization = () => DtIgnoreBatteryOptimizations.execute()
      const dtCleanApp = () => DtCleanApp.execute()

      const dtGetNetworkName = () => Android.getNetworkName()
      const dtGetNetworkLocalIp = () => Android.getLocalIP()
    </script>

    <!-- FUNÇÕES PARA O APP -->
    <script>
      const dtVpnStateListener = (state) => {
        const stateVpn = vpnState(state)

        vpnStatus.html(stateVpn)
      }

      const dtOnNewLogListener = () => writeModalLogger()

      const dtConfigClickListener = () => {
        const user = dtGetUsername()
        const pass = dtGetPassword()
        const value = areaCarrierSelector()

        CarrierTextValue.html(value)

        inputUser.attr({
          placeholder: inputUserPlaceholder(),
          value: inputUserValue(),
        })
        inputPassword.attr({
          placeholder: inputPasswordPlaceholder(),
          value: inputPasswordValue(),
        })
        inputUUID.attr({
          value: inputUUIDValue(),
          placeholder: inputUUIDPlaceholder(),
        })

        toggleInput()
      }

      const dtCheckUserModelListener = (model) => {
        dataCheckuser = model

        writeMainCheckuser(dataCheckuser)
        writeProfileCheckuser(dataCheckuser)

        loadingContainer.toggleClass("show")

        mainCheckuser.addClass("show")
      }

      const dtCheckUserStartedListener = () => {
        loadingContainer.addClass("show")
      }

      const dtMessageErrorListener = (model) => writeModalError(model)
    </script>

    <!-- HELPERS -->
    <script>
      const createSvgIcon = (iconPath, Class = "") => {
        const svg = document.createElementNS(
          "http://www.w3.org/2000/svg",
          "svg"
        )
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg")
        svg.setAttribute("width", "16")
        svg.setAttribute("height", "16")
        svg.setAttribute("fill", "currentColor")
        svg.setAttribute("viewBox", "0 0 16 16")
        svg.setAttribute("class", Class)

        const path = document.createElementNS(
          "http://www.w3.org/2000/svg",
          "path"
        )
        path.setAttribute("d", iconPath)

        svg.appendChild(path)
        return svg
      }

      const createListItem = (iconPath, Class = "", text) => {
        const li = document.createElement("li")
        const svg = createSvgIcon(iconPath, Class)
        const span = document.createElement("span")
        span.setAttribute("class", Class)
        span.innerHTML = text
        li.appendChild(svg)
        li.appendChild(span)
        return li
      }
    </script>

    <!-- FUNÇÕES DO LAYOUT -->
    <script>
      const vpnState = (state) => {
        const stateLabel = state || dtVpnState()

        switch (stateLabel) {
          case "DISCONNECTED":
            writeStartStopVpnButton(dtTranslateText("LBL_BTN_START"))
            return disconnected()
          case "CONNECTING":
            writeStartStopVpnButton(dtTranslateText("LBL_BTN_STOP"))
            return connecting()
          case "CONNECTED":
            writeStartStopVpnButton(dtTranslateText("LBL_BTN_STOP"))
            return connected()
          case "STOPPING":
            writeStartStopVpnButton(dtTranslateText("LBL_BTN_STOPPING"))
            return stopping()
          case "NO_NETWORK":
            writeStartStopVpnButton(dtTranslateText("LBL_BTN_STOP"))
            return noNetwork()
          case "AUTH":
            writeStartStopVpnButton(dtTranslateText("LBL_BTN_STOP"))
            return auth()
          case "AUTH_FAILED":
            writeStartStopVpnButton(dtTranslateText("LBL_BTN_STOP"))
            return authFailed()
          default:
            return "Não foi possível obter o status da conexão"
        }
      }

      const writeNetworkStatus = () => {
        let span = "<span>Localizando rede...</span>"

        setInterval(() => {
          if (dtGetNetworkName() && dtGetNetworkLocalIp()) {
            const carrierName = `${dtGetNetworkName()}`
            const localIP = `${dtGetNetworkLocalIp()}`

            span = `<span>${carrierName}: ${localIP}</span>`

            networkStatus.html(span)
          } else {
            span = `<span>Não foi possível carregar informações da rede</span>`
          }
        }, 500)

        return span
      }

      const allConfigs = () => {
        const ListContainer = document.querySelector("section.list-container")
        ListContainer.innerHTML = ""

        const configs = JSON.parse(dtAllConfigs())
        configs.sort((a, b) => a.sorter - b.sorter)
        configs.forEach((item) =>
          item.items.sort((a, b) => a.sorter - b.sorter)
        )

        configs.forEach((category) => {
          const defaultColor = category.color
          const categoryColor = `#${defaultColor.substr(
            3
          )}${defaultColor.substr(1, 2)}`

          document.documentElement.style.setProperty(
            "--cor-de-fundo-do-header-da-categoria",
            categoryColor
          )
          document.documentElement.style.setProperty(
            "--cor-de-fundo-do-item-da-configuracao",
            categoryColor
          )

          const div = document.createElement("div")
          const header = document.createElement("header")
          const h1 = document.createElement("h1")
          const svg = document.createElementNS(
            "http://www.w3.org/2000/svg",
            "svg"
          )
          const path = document.createElementNS(
            "http://www.w3.org/2000/svg",
            "path"
          )
          const ul = document.createElement("ul")

          div.classList.add("category")
          ul.classList.add("configs")

          h1.textContent = category.name

          svg.setAttribute("xmlns", "http://www.w3.org/2000/svg")
          svg.setAttribute("width", "16")
          svg.setAttribute("height", "16")
          svg.setAttribute("fill", "currentColor")
          svg.setAttribute("class", "bi bi-caret-right")
          svg.setAttribute("viewBox", "0 0 16 16")

          path.setAttribute(
            "d",
            "M6 12.796V3.204L11.481 8 6 12.796zm.659.753 5.48-4.796a1 1 0 0 0 0-1.506L6.66 2.451C6.011 1.885 5 2.345 5 3.204v9.592a1 1 0 0 0 1.659.753"
          )

          svg.appendChild(path)
          header.appendChild(h1)
          header.appendChild(svg)
          div.appendChild(header)

          category.items.forEach((item) => {
            const li = document.createElement("li")
            const img = document.createElement("img")
            const h1Item = document.createElement("h1")
            const pItem = document.createElement("p")
            const pMode = document.createElement("p")
            const divLogo = document.createElement("div")
            const divDescription = document.createElement("div")
            const divMode = document.createElement("div")

            divLogo.classList.add("logo")
            divDescription.classList.add("description")
            divMode.classList.add("mode")

            h1Item.textContent = item.name
            pItem.textContent = item.description
            pMode.textContent = item.mode

            img.setAttribute("src", item.icon)

            divLogo.appendChild(img)
            divDescription.appendChild(h1Item)
            divDescription.appendChild(pItem)
            divMode.appendChild(pMode)

            li.appendChild(divLogo)
            li.appendChild(divDescription)
            li.appendChild(divMode)

            ul.appendChild(li)
            div.appendChild(ul)

            li.addEventListener("click", () => {
              dtSetConfig(item.id)
              listOfCarriers.toggleClass("active")
            })
          })

          header.addEventListener("click", () => {
            if (ul.offsetHeight <= 0) {
              ul.style.maxHeight = `${ul.scrollHeight}px`
              svg.style.transform = "rotate(90deg)"
            } else {
              ul.style.maxHeight = "0px"
              svg.style.transform = "rotate(0deg)"
            }
          })

          ListContainer.appendChild(div)
        })
      }

      const showPassword = () => {
        const inputPassword = document.querySelector("#inputPassword")

        if (inputPassword.type === "password") {
          inputPassword.type = "text"
          eyeHidden.toggleClass(".eye-none").style({ display: "none" })
          eyeShow.style({ display: "block" })
        } else {
          inputPassword.type = "password"
          eyeShow.toggleClass(".eye-none").style({ display: "none" })
          eyeHidden.toggleClass(".eye-none").style({ display: "block" })
        }
      }

      const startStopVpn = () => {
        const state = dtVpnState()

        state === "CONNECTED" ? dtStopVpn() : dtStartVpn()
      }

      const writeStartStopVpnButton = (status) => {
        buttonStartStopVpnValue.html(status)
      }

      const writeMainCheckuser = (model) => {
        const data = JSON.parse(model)

        const ul = document.querySelector(
          "section.main-checkuser section.container-content-checkuser ul"
        )

        const username = createListItem(
          "M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4Zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10Z",
          "",
          `NOME DE USUÁRIO: ${data.username}`
        )

        const expiration = createListItem(
          'M14 0H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM1 3.857C1 3.384 1.448 3 2 3h12c.552 0 1 .384 1 .857v10.286c0 .473-.448.857-1 .857H2c-.552 0-1-.384-1-.857V3.857z"/><path d="M12 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-5 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm2-3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-5 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2z',
          "",
          `EXPIRAÇÃO: ${data.expiration_date}`
        )

        const remainingDays = createListItem(
          "M2.5 15a.5.5 0 1 1 0-1h1v-1a4.5 4.5 0 0 1 2.557-4.06c.29-.139.443-.377.443-.59v-.7c0-.213-.154-.451-.443-.59A4.5 4.5 0 0 1 3.5 3V2h-1a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1h-1v1a4.5 4.5 0 0 1-2.557 4.06c-.29.139-.443.377-.443.59v.7c0 .213.154.451.443.59A4.5 4.5 0 0 1 12.5 13v1h1a.5.5 0 0 1 0 1h-11zm2-13v1c0 .537.12 1.045.337 1.5h6.326c.216-.455.337-.963.337-1.5V2h-7zm3 6.35c0 .701-.478 1.236-1.011 1.492A3.5 3.5 0 0 0 4.5 13s.866-1.299 3-1.48V8.35zm1 0v3.17c2.134.181 3 1.48 3 1.48a3.5 3.5 0 0 0-1.989-3.158C8.978 9.586 8.5 9.052 8.5 8.351z",
          "",
          `DIAS RESTANTES: ${data.expiration_days}`
        )

        const connecteds = createListItem(
          "M11 1H5a1 1 0 0 0-1 1v6a.5.5 0 0 1-1 0V2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v6a.5.5 0 0 1-1 0V2a1 1 0 0 0-1-1Zm1 13a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-2a.5.5 0 0 0-1 0v2a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-2a.5.5 0 0 0-1 0v2ZM1.713 7.954a.5.5 0 1 0-.419-.908c-.347.16-.654.348-.882.57C.184 7.842 0 8.139 0 8.5c0 .546.408.94.823 1.201.44.278 1.043.51 1.745.696C3.978 10.773 5.898 11 8 11c.099 0 .197 0 .294-.002l-1.148 1.148a.5.5 0 0 0 .708.708l2-2a.5.5 0 0 0 0-.708l-2-2a.5.5 0 1 0-.708.708l1.145 1.144L8 10c-2.04 0-3.87-.221-5.174-.569-.656-.175-1.151-.374-1.47-.575C1.012 8.639 1 8.506 1 8.5c0-.003 0-.059.112-.17.115-.112.31-.242.6-.376Zm12.993-.908a.5.5 0 0 0-.419.908c.292.134.486.264.6.377.113.11.113.166.113.169 0 .003 0 .065-.13.187-.132.122-.352.26-.677.4-.645.28-1.596.523-2.763.687a.5.5 0 0 0 .14.99c1.212-.17 2.26-.43 3.02-.758.38-.164.713-.357.96-.587.246-.229.45-.537.45-.919 0-.362-.184-.66-.412-.883-.228-.223-.535-.411-.882-.571ZM7.5 2a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1Z",
          "",
          `CONECTADOS: ${data.count_connections}/${data.limit_connections}`
        )

        ul.innerHTML =
          username.outerHTML +
          expiration.outerHTML +
          remainingDays.outerHTML +
          connecteds.outerHTML
      }

      const showProfile = (model) => {
        hiddenAll()
        const data = model

        const main = document.querySelector("section.profile-checkuser")
        const zIndexMain = window
          .getComputedStyle(main)
          .getPropertyValue("z-index")

        if (data !== undefined) {
          notViewUser.removeClass("show")
          viewUser.addClass("show")
          mainProfile.addClass("show")
        } else {
          viewUser.removeClass("show")
          notViewUser.addClass("show")
          mainProfile.addClass("show")
        }
      }
      const hiddenProfile = () => {
        mainProfile.removeClass("show")
        mainProfile.style({ "z-index": 0 })
      }

      const writeProfileCheckuser = (model) => {
        const data = JSON.parse(model)

        const username = createListItem(
          "M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4Zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10Z",
          "",
          `NOME DE USUÁRIO: ${data.username}`
        )

        const expiration = createListItem(
          'M14 0H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM1 3.857C1 3.384 1.448 3 2 3h12c.552 0 1 .384 1 .857v10.286c0 .473-.448.857-1 .857H2c-.552 0-1-.384-1-.857V3.857z"/><path d="M12 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-5 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm2-3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-5 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2z',
          "even",
          `EXPIRAÇÃO: ${data.expiration_date}`
        )

        const remainingDays = createListItem(
          "M2.5 15a.5.5 0 1 1 0-1h1v-1a4.5 4.5 0 0 1 2.557-4.06c.29-.139.443-.377.443-.59v-.7c0-.213-.154-.451-.443-.59A4.5 4.5 0 0 1 3.5 3V2h-1a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1h-1v1a4.5 4.5 0 0 1-2.557 4.06c-.29.139-.443.377-.443.59v.7c0 .213.154.451.443.59A4.5 4.5 0 0 1 12.5 13v1h1a.5.5 0 0 1 0 1h-11zm2-13v1c0 .537.12 1.045.337 1.5h6.326c.216-.455.337-.963.337-1.5V2h-7zm3 6.35c0 .701-.478 1.236-1.011 1.492A3.5 3.5 0 0 0 4.5 13s.866-1.299 3-1.48V8.35zm1 0v3.17c2.134.181 3 1.48 3 1.48a3.5 3.5 0 0 0-1.989-3.158C8.978 9.586 8.5 9.052 8.5 8.351z",
          "",
          `DIAS RESTANTES: ${data.expiration_days}`
        )

        const connecteds = createListItem(
          "M11 1H5a1 1 0 0 0-1 1v6a.5.5 0 0 1-1 0V2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v6a.5.5 0 0 1-1 0V2a1 1 0 0 0-1-1Zm1 13a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-2a.5.5 0 0 0-1 0v2a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-2a.5.5 0 0 0-1 0v2ZM1.713 7.954a.5.5 0 1 0-.419-.908c-.347.16-.654.348-.882.57C.184 7.842 0 8.139 0 8.5c0 .546.408.94.823 1.201.44.278 1.043.51 1.745.696C3.978 10.773 5.898 11 8 11c.099 0 .197 0 .294-.002l-1.148 1.148a.5.5 0 0 0 .708.708l2-2a.5.5 0 0 0 0-.708l-2-2a.5.5 0 1 0-.708.708l1.145 1.144L8 10c-2.04 0-3.87-.221-5.174-.569-.656-.175-1.151-.374-1.47-.575C1.012 8.639 1 8.506 1 8.5c0-.003 0-.059.112-.17.115-.112.31-.242.6-.376Zm12.993-.908a.5.5 0 0 0-.419.908c.292.134.486.264.6.377.113.11.113.166.113.169 0 .003 0 .065-.13.187-.132.122-.352.26-.677.4-.645.28-1.596.523-2.763.687a.5.5 0 0 0 .14.99c1.212-.17 2.26-.43 3.02-.758.38-.164.713-.357.96-.587.246-.229.45-.537.45-.919 0-.362-.184-.66-.412-.883-.228-.223-.535-.411-.882-.571ZM7.5 2a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1Z",
          "even",
          `CONECTADOS: ${data.count_connections}/${data.limit_connections}`
        )

        viewUser.html(
          username.outerHTML +
            expiration.outerHTML +
            remainingDays.outerHTML +
            connecteds.outerHTML
        )
      }

      const hiddenLoadContainer = () => {
        loadingContainer.removeClass("show")
      }

      const showMainTools = () => {
        hiddenAll()
        MainTools.style({ "z-index": 1 })
        MainTools.addClass("show")
      }
      const hiddenMainTools = () => {
        MainTools.style({ "z-index": 0 })
        MainTools.removeClass("show")
      }

      const showModalSpeedtest = () => {
        ModalSpeedtest.addClass("show")
        IframeModalSpeedtest.attr({ src: "https://fast.com/pt/" })
      }
      const hiddenModalSpeedtest = () => {
        ModalSpeedtest.removeClass("show")
        IframeModalSpeedtest.attr({ src: "" })
      }

      const writeModalError = (model) => {
        const data = JSON.parse(model)

        const h1 = `<h1>${data.title}</h1>`
        const p = `<p>${data.content}</p>`

        ContentModalError.html(h1 + p)

        hiddenAll()
        showModalError()
      }
      const showModalError = () => {
        ModalError.addClass("show")
      }
      const hiddenModalError = () => {
        ModalError.removeClass("show")
      }

      const writeModalLogger = () => {
        const data = JSON.parse(dtGetLogs())
        const p = document.querySelector("section.modal-logs p")

        let content = ""

        data.forEach((item) => {
          content += `${Object.keys(item)} ${item[Object.keys(item)]} <br>`
        })

        ModalLoggerContent.html(content)
        p.scrollTop = p.scrollHeight

        return content
      }
      const showModalLogger = () => {
        ModalLogger.addClass("show")
      }
      const hiddenModalRegister = () => {
        ModalLogger.removeClass("show")
      }

      const showRenew = () => {
        hiddenAll()
        MainRenew.addClass("show")
      }
      const hiddenRenew = () => {
        MainRenew.removeClass("show")
      }

      const hiddenAll = () => {
        hiddenProfile()
        hiddenMainTools()
        hiddenModalSpeedtest()
        hiddenModalError()
        hiddenModalRegister()
        hiddenRenew()
      }
    </script>

    <!-- ESTADOS DE CONEXÃO -->
    <script>
      const disconnected = () => {
        const icon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-outlet" viewBox="0 0 16 16"><path d="M3.34 2.994c.275-.338.68-.494 1.074-.494h7.172c.393 0 .798.156 1.074.494.578.708 1.84 2.534 1.84 5.006 0 2.472-1.262 4.297-1.84 5.006-.276.338-.68.494-1.074.494H4.414c-.394 0-.799-.156-1.074-.494C2.762 12.297 1.5 10.472 1.5 8c0-2.472 1.262-4.297 1.84-5.006zm1.074.506a.376.376 0 0 0-.299.126C3.599 4.259 2.5 5.863 2.5 8c0 2.137 1.099 3.74 1.615 4.374.06.073.163.126.3.126h7.17c.137 0 .24-.053.3-.126.516-.633 1.615-2.237 1.615-4.374 0-2.137-1.099-3.74-1.615-4.374a.376.376 0 0 0-.3-.126h-7.17z"/><path d="M6 5.5a.5.5 0 0 1 .5.5v1.5a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm4 0a.5.5 0 0 1 .5.5v1.5a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zM7 10v1h2v-1a1 1 0 0 0-2 0z"/></svg>`
        const text = `<span>${dtTranslateText("LBL_STATE_DISCONNECTED")}</span>`

        return icon + text
      }

      const connecting = () => {
        const icon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plug" viewBox="0 0 16 16"><path d="M6 0a.5.5 0 0 1 .5.5V3h3V.5a.5.5 0 0 1 1 0V3h1a.5.5 0 0 1 .5.5v3A3.5 3.5 0 0 1 8.5 10c-.002.434-.01.845-.04 1.22-.041.514-.126 1.003-.317 1.424a2.083 2.083 0 0 1-.97 1.028C6.725 13.9 6.169 14 5.5 14c-.998 0-1.61.33-1.974.718A1.922 1.922 0 0 0 3 16H2c0-.616.232-1.367.797-1.968C3.374 13.42 4.261 13 5.5 13c.581 0 .962-.088 1.218-.219.241-.123.4-.3.514-.55.121-.266.193-.621.23-1.09.027-.34.035-.718.037-1.141A3.5 3.5 0 0 1 4 6.5v-3a.5.5 0 0 1 .5-.5h1V.5A.5.5 0 0 1 6 0zM5 4v2.5A2.5 2.5 0 0 0 7.5 9h1A2.5 2.5 0 0 0 11 6.5V4H5z"/></svg>`
        const text = `<span>${dtTranslateText("LBL_STATE_CONNECTING")}</span>`

        return icon + text
      }

      const connected = () => {
        const icon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plugin" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M1 8a7 7 0 1 1 2.898 5.673c-.167-.121-.216-.406-.002-.62l1.8-1.8a3.5 3.5 0 0 0 4.572-.328l1.414-1.415a.5.5 0 0 0 0-.707l-.707-.707 1.559-1.563a.5.5 0 1 0-.708-.706l-1.559 1.562-1.414-1.414 1.56-1.562a.5.5 0 1 0-.707-.706l-1.56 1.56-.707-.706a.5.5 0 0 0-.707 0L5.318 5.975a3.5 3.5 0 0 0-.328 4.571l-1.8 1.8c-.58.58-.62 1.6.121 2.137A8 8 0 1 0 0 8a.5.5 0 0 0 1 0Z"/></svg>`
        const text = `<span>${dtTranslateText("LBL_STATE_CONNECTED")}</span>`

        return icon + text
      }

      const stopping = () => {
        const icon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-stop" viewBox="0 0 16 16"><path d="M3.5 5A1.5 1.5 0 0 1 5 3.5h6A1.5 1.5 0 0 1 12.5 5v6a1.5 1.5 0 0 1-1.5 1.5H5A1.5 1.5 0 0 1 3.5 11V5zM5 4.5a.5.5 0 0 0-.5.5v6a.5.5 0 0 0 .5.5h6a.5.5 0 0 0 .5-.5V5a.5.5 0 0 0-.5-.5H5z"/></svg>`
        const text = `<span>${dtTranslateText("LBL_STATE_STOPPING")}</span>`

        return icon + text
      }

      const noNetwork = () => {
        const icon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-wifi-off" viewBox="0 0 16 16"><path d="M10.706 3.294A12.545 12.545 0 0 0 8 3C5.259 3 2.723 3.882.663 5.379a.485.485 0 0 0-.048.736.518.518 0 0 0 .668.05A11.448 11.448 0 0 1 8 4c.63 0 1.249.05 1.852.148l.854-.854zM8 6c-1.905 0-3.68.56-5.166 1.526a.48.48 0 0 0-.063.745.525.525 0 0 0 .652.065 8.448 8.448 0 0 1 3.51-1.27L8 6zm2.596 1.404.785-.785c.63.24 1.227.545 1.785.907a.482.482 0 0 1 .063.745.525.525 0 0 1-.652.065 8.462 8.462 0 0 0-1.98-.932zM8 10l.933-.933a6.455 6.455 0 0 1 2.013.637c.285.145.326.524.1.75l-.015.015a.532.532 0 0 1-.611.09A5.478 5.478 0 0 0 8 10zm4.905-4.905.747-.747c.59.3 1.153.645 1.685 1.03a.485.485 0 0 1 .047.737.518.518 0 0 1-.668.05 11.493 11.493 0 0 0-1.811-1.07zM9.02 11.78c.238.14.236.464.04.66l-.707.706a.5.5 0 0 1-.707 0l-.707-.707c-.195-.195-.197-.518.04-.66A1.99 1.99 0 0 1 8 11.5c.374 0 .723.102 1.021.28zm4.355-9.905a.53.53 0 0 1 .75.75l-10.75 10.75a.53.53 0 0 1-.75-.75l10.75-10.75z"/></svg>`
        const text = `<span>${dtTranslateText("LBL_STATE_NO_NETWORK")}</span>`

        return icon + text
      }

      const auth = () => {
        const icon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-lock" viewBox="0 0 16 16"><path d="M11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 5.996V14H3s-1 0-1-1 1-4 6-4c.564 0 1.077.038 1.544.107a4.524 4.524 0 0 0-.803.918A10.46 10.46 0 0 0 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h5ZM9 13a1 1 0 0 1 1-1v-1a2 2 0 1 1 4 0v1a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1v-2Zm3-3a1 1 0 0 0-1 1v1h2v-1a1 1 0 0 0-1-1Z"/></svg>`
        const text = `<span>${dtTranslateText("LBL_STATE_AUTH")}</span>`

        return icon + text
      }

      const authFailed = () => {
        const icon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-slash" viewBox="0 0 16 16"><path d="M13.879 10.414a2.501 2.501 0 0 0-3.465 3.465l3.465-3.465Zm.707.707-3.465 3.465a2.501 2.501 0 0 0 3.465-3.465Zm-4.56-1.096a3.5 3.5 0 1 1 4.949 4.95 3.5 3.5 0 0 1-4.95-4.95ZM11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm.256 7a4.474 4.474 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10c.26 0 .507.009.74.025.226-.341.496-.65.804-.918C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4s1 1 1 1h5.256Z"/></svg>`
        const text = `<span>${dtTranslateText("LBL_STATE_AUTH_FAILED")}</span>`

        return icon + text
      }
    </script>

    <!-- VALOR DE EXIBIÇÃO DO CAMPO DE SELECIONAR OPERADORA -->
    <script>
      const areaCarrierSelector = () => {
        const data = dtGetDefaultConfig()

        if (data !== undefined) {
          return JSON.parse(data).name
        } else {
          return dtTranslateText("LBL_CHOOSE_CONFIG")
        }
      }
    </script>

    <!-- VALOR DE EXIBIÇÃO DO INPUT USUÁRIO DO USUÁRIO -->
    <script>
      const inputUserPlaceholder = () => dtTranslateText("LBL_USERNAME")
      const inputUserValue = () => {
        if (dtGetUsername()) {
          return dtGetUsername()
        } else {
          return ""
        }
      }
    </script>

    <!-- VALOR DE EXIBIÇÃO DO INPUT DA SENHA DO USUÁRIO -->
    <script>
      const inputPasswordPlaceholder = () => dtTranslateText("LBL_PASSWORD")
      const inputPasswordValue = () => {
        if (dtGetPassword()) {
          return dtGetPassword()
        } else {
          return ""
        }
      }
    </script>

    <!-- VALOR DE EXIBIÇÃO DO INPUT DA SENHA DO USUÁRIO -->
    <script>
      const inputUUIDPlaceholder = () => dtTranslateText("LBL_UUID")
      const inputUUIDValue = () => {
        if (dtGetUUID()) {
          return dtGetUUID()
        } else {
          return ""
        }
      }
    </script>

    <!-- DOM WRAPPER -->
    <script>
      const Dom = (selector) => {
        const _elements = document.querySelectorAll(selector)

        const wrapper = {
          on(listeners) {
            for (const [event, listener] of Object.entries(listeners)) {
              _elements.forEach((element) => {
                element.addEventListener(event, listener)
              })
            }

            return wrapper
          },
          addClass: (...tokens) => {
            _elements.forEach((element) => {
              element.classList.add(...tokens)
            })

            return wrapper
          },
          removeClass: (...tokens) => {
            _elements.forEach((element) => {
              element.classList.remove(...tokens)
            })

            return wrapper
          },
          toggleClass: (token, force) => {
            _elements.forEach((element) => {
              element.classList.toggle(token, force)
            })

            return wrapper
          },
          style(styles) {
            for (const [property, value] of Object.entries(styles)) {
              console.log(value)
              _elements.forEach((element) => {
                element.style[property] = value
              })
            }

            return wrapper
          },
          attr(attrs) {
            for (const [name, value] of Object.entries(attrs)) {
              _elements.forEach((element) => element.setAttribute(name, value))
            }

            return wrapper
          },
          html(value) {
            _elements.forEach((element) => (element.innerHTML = value))
            return wrapper
          },
        }

        return wrapper
      }
    </script>

    <!-- VÁRIAVIES -->
    <script>
      const main = Dom("main")

      const vpnStatus = Dom("section.vpnStatus")

      const networkStatus = Dom("section.local-ip")

      const carrierSelector = Dom("div.carrierSelector")
      const listOfCarriers = Dom("section.listOfCarriers")
      const closeModalCarriers = Dom("#close-modal-configs")
      const CarrierCategoryContainer = Dom("section.list-container")
      const CarrierTextValue = Dom("div.carrierSelector span")

      const buttonControl = Dom("section.controls")
      const refreshButton = Dom("#refresh-button")
      const renewButton = Dom("#renew")
      const backToHome = Dom("#backToHome")
      const ToolsButton = Dom("#utilitys")
      const profileButton = Dom("#profile-button")

      const ContainerInputUser = Dom("#container-user-input")
      const ContainerInputPassword = Dom("#container-password-input")
      const ContainerInputUUID = Dom("#container-uuid-input")

      const inputUser = Dom("#inputUser")
      const inputPassword = Dom("#inputPassword")
      const inputUUID = Dom("#uuid-input")

      const buttonStartStopVpn = Dom("#startStopVpn")
      const buttonLogs = Dom("#buttonLogs")
      const buttonStartStopVpnValue = Dom("#startStopVpnButtonValue")

      const mainCheckuser = Dom("section.main-checkuser")
      const mainCheckuserClose = Dom("section.main-checkuser header svg")
      const mainCheckuserContent = Dom(
        "section.main-checkuser section.container-content-checkuser"
      )

      const loadingContainer = Dom("section.loading")
      const loadingContainerClose = Dom("section.loading header svg")

      const mainProfile = Dom("section.profile-checkuser")
      const notViewUser = Dom("#not-profile-user")
      const viewUser = Dom("#list-profile")

      const MainTools = Dom("section.tools")
      const ConfigApnButton = Dom("#config-apn")
      const BatteryOptimizeButton = Dom("#battery-optimization")
      const SpeedtestButton = Dom("#speedtest")
      const ClearDataAppButton = Dom("#clean-data-app")

      const MainRenew = Dom("section.renew-window")

      const ModalSpeedtest = Dom("section.modal-speedtest")
      const CloseModalSpeedtest = Dom("section.modal-speedtest header svg")
      const IframeModalSpeedtest = Dom("section.modal-speedtest section iframe")

      const ModalError = Dom("section.modal-error-alert")
      const CloseModalError = Dom("section.modal-error-alert header svg")
      const ContentModalError = Dom("section.modal-error-alert section")

      const ModalLogger = Dom("section.modal-logs")
      const CloseModalLogger = Dom("#hidden-modal-logs")
      const ModalLoggerContent = Dom("section.modal-logs p")
      const CleanLoggerContent = Dom("#clean-data-logs")

      const eyeHidden = Dom("svg.eye-hidden")
      const eyeShow = Dom("svg.eye-show")

      const ButtonRenew = Dom("#renew_acess")
    </script>

    <!-- AÇÕES -->
    <script>
      main.style({ padding: `${dtStatusBarHeight() + 100}px 0px 0px 0px` })
      mainProfile.style({
        padding: `${dtStatusBarHeight() + 10}px 0px ${
          dtNavHeight() + 90
        }px 0px`,
      })

      MainTools.style({
        padding: `${dtStatusBarHeight() + 10}px 0px ${
          dtNavHeight() + 90
        }px 0px`,
      })

      MainRenew.style({
        padding: `${dtStatusBarHeight() + 10}px 0px ${
          dtNavHeight() + 90
        }px 0px`,
      })

      ModalLogger.style({
        top: `${dtStatusBarHeight() + 95}px`,
        bottom: `${dtNavHeight() + 95}px`,
      })

      vpnStatus.html(vpnState())
      networkStatus.html(writeNetworkStatus())

      carrierSelector.on({
        click: () => {
          allConfigs()
          listOfCarriers.toggleClass("active")
        },
      })
      closeModalCarriers.on({
        click: () => listOfCarriers.toggleClass("active"),
      })
      CarrierTextValue.html(areaCarrierSelector())

      inputUser.on({ input: (e) => dtSetUsername(e.target.value) })
      inputPassword.on({ input: (e) => dtSetPassword(e.target.value) })
      inputUUID.on({ input: (e) => dtSetUUID(e.target.value) })
      eyeHidden.on({ click: () => showPassword() })
      eyeShow.on({ click: () => showPassword() })

      inputUser.attr({
        placeholder: inputUserPlaceholder(),
        value: inputUserValue(),
      })
      inputPassword.attr({
        placeholder: inputPasswordPlaceholder(),
        value: inputPasswordValue(),
      })
      inputUUID.attr({
        value: inputUUIDValue(),
        placeholder: inputUUIDPlaceholder(),
      })

      buttonControl.style({ bottom: `${dtNavHeight() + 10}px` })
      refreshButton.on({ click: () => dtUpdate() })
      renewButton.on({ click: () => showRenew() })
      backToHome.on({
        click: () => {
          hiddenAll()
        },
      })
      ToolsButton.on({ click: () => showMainTools() })
      profileButton.on({ click: () => showProfile(dataCheckuser) })

      buttonStartStopVpn.on({ click: () => startStopVpn() })
      buttonLogs.on({ click: () => showModalLogger() })

      loadingContainerClose.on({ click: () => hiddenLoadContainer() })

      mainCheckuserClose.on({ click: () => mainCheckuser.toggleClass("show") })

      ConfigApnButton.on({ click: () => dtApnConfig() })
      BatteryOptimizeButton.on({ click: () => DtStartWebViewActivity.execute('http://youtube.com')})
      SpeedtestButton.on({ click: () => showModalSpeedtest() })
      CloseModalSpeedtest.on({ click: () => hiddenModalSpeedtest() })
      ClearDataAppButton.on({ click: () => dtCleanApp() })

      ButtonRenew.on({click: () => DtStartWebViewActivity.execute('https://xcloudssh.painelatlas.store')})

      CloseModalError.on({ click: () => hiddenModalError() })

      ModalLoggerContent.html(writeModalLogger())
      CleanLoggerContent.on({ click: () => dtClearLogs() })
      CloseModalLogger.on({ click: () => hiddenModalRegister() })

      const checkV2ray = () => {
        const data = JSON.parse(dtGetDefaultConfig())

        const isV2ray = data?.mode?.toLowerCase()?.startsWith("v2ray")

        if (!dtGetDefaultConfig()) {
          return false
        } else if (isV2ray && data?.auth?.v2ray_uuid) {
          return "have_uuid"
        } else if (isV2ray && !data?.auth?.v2ray_uuid) {
          return "not_have_uuid"
        } else {
          return false
        }
      }

      const toggleInput = () => {
        if (checkV2ray() === "not_have_uuid") {
          ContainerInputUser.style({ display: "none" })

          ContainerInputPassword.style({ display: "none" })

          ContainerInputUUID.style({ display: "flex" })
        } else if (checkV2ray() === "have_uuid") {
          ContainerInputUser.style({ display: "none" })

          ContainerInputPassword.style({ display: "none" })

          ContainerInputUUID.style({ display: "none" })
        } else {
          ContainerInputUser.style({ display: "flex" })

          ContainerInputPassword.style({ display: "flex" })

          ContainerInputUUID.style({ display: "none" })
        }
      }

      toggleInput()
    </script>
  </body>
</html>
